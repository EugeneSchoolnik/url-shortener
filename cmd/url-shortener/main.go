package main

import (
	"fmt"
	"log"
	"log/slog"
	"net/http"
	"os"
	"time"
	"url-shortener/internal/config"
	"url-shortener/internal/database"
	"url-shortener/internal/database/repo"
	http_server "url-shortener/internal/http"
	"url-shortener/internal/http/handler"
	"url-shortener/internal/lib/logger/sl"
	"url-shortener/internal/service/auth"
	clickstat "url-shortener/internal/service/click-stat"
	"url-shortener/internal/service/url"
	"url-shortener/internal/service/user"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "url-shortener/docs" // docs is generated by Swag CLI, you have to import it.
)

const (
	envLocal = "local"
	envDev   = "dev"
	envProd  = "prod"
)

// @title Url Shortener API
// @version 1.0
// @host localhost:8080
// @BasePath /api/v1

// @securityDefinitions.apikey Bearer
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
func main() {
	cfg := config.MustLoad()
	log.Printf("config loaded: %v\n", cfg)

	log := setupLogger(cfg.Env)
	log.Info("starting url-shortener", slog.String("env", cfg.Env))
	log.Debug("debug messages are enabled")

	db, err := database.New(&cfg.Postgres)
	if err != nil {
		log.Error("failed to init database: %s", sl.Err(err))
		return
	}
	log.Info("database initialized")

	// services
	userRepo := repo.NewUserRepo(db)
	urlRepo := repo.NewUrlRepo(db)
	clickStatRepo := repo.NewClickStatRepo(db)
	userService := user.New(userRepo, log)
	jwtService := auth.NewJWTService("secret", time.Hour)
	authService := auth.New(userService, jwtService, log)
	urlService := url.New(urlRepo, log)
	clickStatService := clickstat.New(clickStatRepo, log)

	// init click stats cleanup
	_, err = clickStatService.CleanupStaleRecords()
	if err != nil {
		log.Error("failed to schedule cleanup job", sl.Err(err))
		return
	}

	// init http server
	router := http_server.NewRouter(log, &handler.Dependencies{JwtService: jwtService, UserService: userService, AuthService: authService, UrlService: urlService, ClickStatService: clickStatService})
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	server := NewServer(&cfg.HTTPServer, router)

	log.Info(fmt.Sprintf("Starting server at %s:%s", cfg.HTTPServer.Host, cfg.HTTPServer.Port))
	if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		log.Error("server failed: %v", sl.Err(err))
	}
}

func NewServer(cfg *config.HTTPServer, handler http.Handler) *http.Server {
	return &http.Server{
		Addr:         fmt.Sprintf("%s:%s", cfg.Host, cfg.Port),
		Handler:      handler,
		ReadTimeout:  cfg.Timeout,
		WriteTimeout: cfg.Timeout,
		IdleTimeout:  cfg.IdleTimeout,
	}
}

func NewRouter() *gin.Engine {
	router := gin.New()
	router.Use(gin.Logger(), gin.Recovery())

	return router
}

func setupLogger(env string) *slog.Logger {
	var log *slog.Logger

	switch env {
	case envLocal:
		log = slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelDebug}))
	case envDev:
		log = slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelDebug}))
	case envProd:
		log = slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelInfo}))
	}

	return log
}
