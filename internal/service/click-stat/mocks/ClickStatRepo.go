// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "url-shortener/internal/model"

	mock "github.com/stretchr/testify/mock"

	repo "url-shortener/internal/database/repo"
)

// ClickStatRepo is an autogenerated mock type for the ClickStatRepo type
type ClickStatRepo struct {
	mock.Mock
}

// ByUrlID provides a mock function with given fields: id
func (_m *ClickStatRepo) ByUrlID(id string) ([]repo.DailyCount, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ByUrlID")
	}

	var r0 []repo.DailyCount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]repo.DailyCount, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []repo.DailyCount); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.DailyCount)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ClickStat
func (_m *ClickStatRepo) Create(ClickStat *model.ClickStat) error {
	ret := _m.Called(ClickStat)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ClickStat) error); ok {
		r0 = rf(ClickStat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClickStatRepo creates a new instance of ClickStatRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClickStatRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClickStatRepo {
	mock := &ClickStatRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
