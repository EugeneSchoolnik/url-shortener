// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "url-shortener/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// UrlRepo is an autogenerated mock type for the UrlRepo type
type UrlRepo struct {
	mock.Mock
}

// ByID provides a mock function with given fields: id
func (_m *UrlRepo) ByID(id string) (*model.Url, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ByID")
	}

	var r0 *model.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Url, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Url); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByUserID provides a mock function with given fields: id, limit, offset
func (_m *UrlRepo) ByUserID(id string, limit int, offset int) ([]model.Url, error) {
	ret := _m.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ByUserID")
	}

	var r0 []model.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]model.Url, error)); ok {
		return rf(id, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []model.Url); ok {
		r0 = rf(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0
func (_m *UrlRepo) Create(_a0 *model.Url) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Url) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, userID
func (_m *UrlRepo) Delete(id string, userID string) error {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkByID provides a mock function with given fields: id
func (_m *UrlRepo) LinkByID(id string) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for LinkByID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUrlRepo creates a new instance of UrlRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlRepo {
	mock := &UrlRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
