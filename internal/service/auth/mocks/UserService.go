// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	dto "url-shortener/internal/model/dto"

	mock "github.com/stretchr/testify/mock"

	model "url-shortener/internal/model"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// ByEmail provides a mock function with given fields: email, withContext
func (_m *UserService) ByEmail(email string, withContext ...bool) (*model.User, error) {
	_va := make([]interface{}, len(withContext))
	for _i := range withContext {
		_va[_i] = withContext[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, email)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ByEmail")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...bool) (*model.User, error)); ok {
		return rf(email, withContext...)
	}
	if rf, ok := ret.Get(0).(func(string, ...bool) *model.User); ok {
		r0 = rf(email, withContext...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...bool) error); ok {
		r1 = rf(email, withContext...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ById provides a mock function with given fields: id, withContext
func (_m *UserService) ById(id string, withContext ...bool) (*model.User, error) {
	_va := make([]interface{}, len(withContext))
	for _i := range withContext {
		_va[_i] = withContext[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ById")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...bool) (*model.User, error)); ok {
		return rf(id, withContext...)
	}
	if rf, ok := ret.Get(0).(func(string, ...bool) *model.User); ok {
		r0 = rf(id, withContext...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...bool) error); ok {
		r1 = rf(id, withContext...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: userDto
func (_m *UserService) Create(userDto *model.User) error {
	ret := _m.Called(userDto)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(userDto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *UserService) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, userDto
func (_m *UserService) Update(id string, userDto *dto.UpdateUser) error {
	ret := _m.Called(id, userDto)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *dto.UpdateUser) error); ok {
		r0 = rf(id, userDto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
